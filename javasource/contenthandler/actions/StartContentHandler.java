// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package contenthandler.actions;

import java.util.ArrayList;
import java.util.List;
import scala.collection.Set;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.webui.CustomJavaAction;
import contenthandler.proxies.ContentAlias;
import contenthandler.proxies.ContentDocument;
import contenthandler.proxies.KVP;

/**
 * The content handler is executed on startup. The content handler works similar to the deeplink module, and listens to the 'content' path of your application server (or another path as defined by the startPath parameter). The user calls e.g. the /content/getcss hyperlink which looks up the getcss alias in the "ContentAlias" list and executes the corresponding microflow and returns the content as generated by the microflow (e.g. css stylsheet).
 * 
 * Parameters:
 * startPath: link that the content handler listens to.
 * 
 */
public class StartContentHandler extends CustomJavaAction<Boolean>
{
	private String startPath;

	public StartContentHandler(IContext context, String startPath)
	{
		super(context);
		this.startPath = startPath;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		if(!this.startPath.endsWith("/"))
			this.startPath += "/";
		Core.addRequestHandler(this.startPath, new ContentHandler());
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "StartContentHandler";
	}

	// BEGIN EXTRA CODE
	/**
	 * 
	 * handles the request for content
	 * The content is generated by a microflow.
	 * The microflow name (FQDN) is the 3rd parameter in the path (e.g. localhost/content/ContentHandler.IVK_ExecuteCSS)
	 * The microflow must return a ContentDocument entity, containing details about the generated content
	 * The microflow can optionally contain a List of KVP entities as input parameter.
	 * This list will contain query parameters, e.g. ?customer=huit&css=huittheme which will translate into 2 KVP entities.
	 * The query string params as well as the input param in the microflow can be omitted, if not used
	 * 
	 */
	class ContentHandler extends RequestHandler {
		private static final String XAS_ID = "XASID";
		
		@Override
		public void processRequest(IMxRuntimeRequest request,
				IMxRuntimeResponse response, String arg2) throws Exception 
		{
           
			try {
				String[] args = request.getResourcePath().split("/");
				if (args.length < 3) {
					StartContentHandler.logger.warn("Received invalid number of arguments: " + args.length);
					response.setStatus(IMxRuntimeResponse.NOT_FOUND);
					return;
				}
				
				ISession session = this.getSessionFromRequest(request);
                	
                if (session != null) {
                    serveContent(args, request, response, session);
                } else { 
                	response.setStatus(IMxRuntimeResponse.UNAUTHORIZED);
                }
			}
			catch (Exception e)
			{
				response.setStatus(IMxRuntimeResponse.UNAUTHORIZED /* .INTERNAL_SERVER_ERROR */); 
				StartContentHandler.logger.error("Error while serving contentHandler: ", e);
			}				
		}

		private void serveContent(String[] args, IMxRuntimeRequest request, IMxRuntimeResponse response, ISession existingsession) throws Exception {
			
			String uFlowAlias = args[2];
			StartContentHandler.logger.debug("looking up alias: "+ uFlowAlias);
			List<IMendixObject> objs = Core.retrieveXPathQueryEscaped(getContext(), "//%s[Active = true()][UrlPathAlias='%s']", ContentAlias.getType(), uFlowAlias );
			if(objs == null || objs.size() == 0)
				throw new CoreException("ContentAlias entity for alias: " + uFlowAlias + " does not exist or is not active.");
			
			ContentAlias contentAlias = ContentAlias.initialize(getContext(), objs.get(0)); 
			String uFlow = contentAlias.getMicroflowName();

			java.util.Set<String> flows = Core.getMicroflowNames();			
			//check if flow exists 
			if(!flows.contains(uFlow))
				throw new CoreException("Microflow: " + uFlow + " does not exist");

			//switch to the users context
			ISession session = existingsession;
			IContext context = session.createContext(); 
			//we have a valid session, further security is enforced by the application
			
			ArrayList<IMendixObject> kvps = new ArrayList<IMendixObject>();
			
			//take url params
			if (contentAlias.getParseRequestParams()) {
				String qs = request.getHttpServletRequest().getQueryString();
				if(qs != null) {
					String [] parameters = qs.split("&");
					for(int i = 0; i < parameters.length; i++) {
						String [] items = parameters[i].split("=");
						KVP objKvp = KVP.initialize(context, Core.instantiate(context, KVP.entityName));
						objKvp.setKey(items[0]);
						objKvp.setValue(items[1]);
						kvps.add(objKvp.getMendixObject());
					}				
				}
			}
			//invoke the microflow
			ContentDocument contDoc = null;
			try {
				StartContentHandler.logger.debug("start executing microFlow : "+ uFlow);
				IMendixObject obj = Core.execute(context, uFlow, kvps.size() > 0 ? kvps : null);
				contDoc = ContentDocument.initialize(context, obj);
				StartContentHandler.logger.debug("microFlow executed: "+ uFlow);
			} catch (CoreException e) {
				StartContentHandler.logger.error("Failed to execute microflow action " + uFlow, e);
				throw(e);
			}

			if(contDoc == null)
				throw new CoreException("Invalid response from microflow. Use ContentDocument as return type in the microflow");

			//finally, set response
			//TODO - ED - needed??
			setCookies(response, session);
			
			StartContentHandler.logger.debug("ContentDocument charEnc: " + contDoc.getEncoding());
			StartContentHandler.logger.debug("ContentDocument conttype: " + contDoc.getContentType());
			StartContentHandler.logger.debug("ContentDocument status: " + contDoc.getStatusCode());
			StartContentHandler.logger.debug("ContentDocument content: " + contDoc.getContent());
			
			response.setCharacterEncoding(contDoc.getEncoding());
			response.setContentType(contDoc.getContentType());
			response.getWriter().write(contDoc.getContent());
			//response.setStatus(IMxRuntimeResponse.OK);
			response.setStatus(contDoc.getStatusCode());
		}

		private void setCookies(IMxRuntimeResponse response, ISession session) {
			response.addCookie(XAS_SESSION_ID, session.getId().toString(),  "/", "", -1, true);
			response.addCookie(XAS_ID, "0."+Core.getXASId(),"/", "", -1, true);			 
		}

/*
		private String getRelPath(IMxRuntimeRequest request) {
			String res = "";
			int length = request.getResourcePath().split("/").length +
				(request.getResourcePath().endsWith("/") ? 0 : -1);
			for(int i1 = 0; i1 < length; i1++)
				res+= "../";
			return res;
		}
*/		

	}
	
	//ContentHandler commons
	protected static ILogNode logger = Core.getLogger("ContentHandler");
	
	// END EXTRA CODE
}
